#!/bin/sh

# VERSION CONTROL
# change the version numbers to manage what versions are installed during script execution.
ruby_version="2.3.3"
node_version="8.9"
npm_version="5.6"
rhino="
                                   ,-.             __
                                 ,\'   \`---.___.---\'  \`.
                               ,\'   ,-                 \`-._
                             ,\'    /                       \\
                     \'\\   ,\\/     /                         \\\\
                      )\`._)>)     |                          \\\\
                      \`>,\'    _   \\                  /       ||
                        )      \\   |   |            |        |\\\\
               .   ,   /        \\  |    \`.          |        | ))
               \\\`. \\\`-\'          )-|      \`.        |        /((
                \\ \`-\`   .\`     _/  \\ _     )\`-.___.--\\      /  \`\'
                 \`._         ,\'     \`j\`.__/           \`.    \\
  Hi there.        / ,    ,\'         \\   /\`             \\   /
                   \\__   /           _) (               _) (
                     \`--\'           /____\\             /____\\

"

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}

append_to_bashrc() {
  local text="$1" bashrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.bashrc.local" ]; then
    bashrc="$HOME/.bashrc.local"
  else
    bashrc="$HOME/.bashrc"
  fi

  if ! grep -Fqs "$text" "$bashrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\n" "$text" >> "$bashrc"
    else
      printf "\n%s\n" "$text" >> "$bashrc"
    fi
  fi
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
    rbenv rehash
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.bashrc" ]; then
  touch "$HOME/.bashrc"
fi

# shellcheck disable=SC2016
append_to_bashrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

# Begin Installation
fancy_echo "$rhino"
fancy_echo "Hello and welcome to RigUp's laptop installer!"

if type xcode-select >&- && xpath=$( xcode-select --print-path ) && test -d "${xpath}" && test -x "${xpath}" ; then
  fancy_echo "xcode is already installed, cool beans!"
else
  fancy_echo "Installing xcode..."
  xcode-select --install
fi

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_bashrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_bashrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update
brew bundle --file=- <<EOF
# Unix
brew "git"

# GitHub
brew "hub"

# Heroku
brew "heroku"

# Programming languages
brew "node"

# Version managers
brew "rbenv"

# Databases
brew "postgresql@9.6", restart_service: true
EOF

if ! n --version; then
  fancy_echo "Installing n..."
  npm install -g n
fi

fancy_echo "Configuring node..."
if ! node -v | grep -Fq "$node_version"; then
  fancy_echo "Installing node $node_version using n version manager..."
  sudo n "$node_version"
fi

fancy_echo "Configuring npm..."
if ! npm -v | grep -Fq "$npm_version"; then
  fancy_echo "Installing npm $npm_version"
  sudo npm install npm@"$npm_version" -g
fi

fancy_echo "Configuring Ruby ..."
if ! rbenv versions | grep 2.3.3; then
  fancy_echo "Installing ruby $ruby_version..."
  rbenv install -s "$ruby_version"
  gem install yard #prevents "can't modify frozen hash" error from dependency
fi

# shellcheck disable=SC2016
append_to_bashrc 'eval "$(rbenv init - --no-rehash)"' 1
eval "$(rbenv init -)"

if ! rbenv versions | grep -Fq "$ruby_version"; then
  rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"
gem update --system
gem_install_or_update 'bundler'
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local..."
  # shellcheck disable=SC1090
  . "$HOME/.laptop.local"
fi
